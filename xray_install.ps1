# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Xray + Reality —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º

$ErrorActionPreference = "Stop"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!" -ForegroundColor Red
    exit 1
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
$InstallDir = "C:\Program Files\XrayReality"
$XrayUrl = "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-windows-64.zip"
$ServiceName = "XrayRealityService"
$DesktopPath = [Environment]::GetFolderPath("Desktop")
$KeysFile = Join-Path $DesktopPath "keys.txt"
$ZipPath = "$env:TEMP\Xray.zip"

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è Reality
$popularDomains = @(
    "www.google.com",
    "www.microsoft.com",
    "www.cloudflare.com",
    "www.github.com",
    "www.amazon.com"
)

Write-Host "=============================================="
Write-Host "üöÄ –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray + Reality"
Write-Host "=============================================="

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
if (-Not (Test-Path $InstallDir)) {
    Write-Host "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $InstallDir"
    New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
}

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ Xray
Write-Host "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Xray..."
try {
    Invoke-WebRequest -Uri $XrayUrl -OutFile $ZipPath
    Write-Host "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
    Expand-Archive -Path $ZipPath -DestinationPath $InstallDir -Force
    Remove-Item $ZipPath
    Write-Host "‚úÖ –ê—Ä—Ö–∏–≤ Xray —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ Xray: $_" -ForegroundColor Red
    exit 1
}

# –ü–æ–∏—Å–∫ xray.exe –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
Write-Host "üîç –ü–æ–∏—Å–∫ xray.exe –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $InstallDir..."
$XrayExe = Get-ChildItem -Path $InstallDir -Recurse -Include "xray.exe" | Select-Object -First 1 -ExpandProperty FullName
if (-Not $XrayExe) {
    Write-Host "‚ùå –§–∞–π–ª xray.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $InstallDir –∏–ª–∏ –µ–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ –ù–∞–π–¥–µ–Ω xray.exe: $XrayExe"

function Generate-RandomShortId {
    $bytes = New-Object Byte[] 4
    [System.Security.Cryptography.RandomNumberGenerator]::Create().GetBytes($bytes)
    return [System.BitConverter]::ToString($bytes).Replace("-", "").Substring(0, 8).ToLower()
}

function Generate-Keys {
    Write-Host "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π..."
    $result = & $XrayExe x25519
    $publicKey = ($result | Select-String "Public key" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
    $privateKey = ($result | Select-String "Private key" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
    return @{Public=$publicKey; Private=$privateKey}
}

# –ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –¥–ª—è SOCKS
Write-Host "`nüîê –í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SOCKS-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
$socksUsername = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
$socksPassword = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" -AsSecureString
$socksPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($socksPassword))

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
$serverName = $popularDomains | Get-Random
$shortId = Generate-RandomShortId
$port = Get-Random -Minimum 20000 -Maximum 60000
$uuid = [guid]::NewGuid().ToString()

Write-Host "`nüõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
Write-Host "  - –ü–æ—Ä—Ç: $port"
Write-Host "  - ServerName: $serverName"
Write-Host "  - ShortID: $shortId"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
$keys = Generate-Keys

$configJson = @"
{
  "log": {
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "port": $port,
      "protocol": "socks",
      "settings": {
        "auth": "password",
        "accounts": [
          {
            "user": "$socksUsername",
            "pass": "$socksPassword"
          }
        ],
        "udp": true
      },
      "sniffing": {
        "enabled": true,
        "destOverride": ["http", "tls"]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "$serverName`:443",
          "xver": 0,
          "serverNames": ["$serverName"],
          "privateKey": "$($keys.Private)",
          "shortIds": ["$shortId"]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
"@

$configPath = Join-Path $InstallDir "config.json"
Set-Content -Path $configPath -Value $configJson -Encoding UTF8

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã Windows
Write-Host "üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã Windows..."
try {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ª—É–∂–±—ã
    if (Get-Service -Name $ServiceName -ErrorAction SilentlyContinue) {
        Write-Host "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ª—É–∂–±—ã $ServiceName..."
        Stop-Service -Name $ServiceName -Force -ErrorAction SilentlyContinue
        & sc.exe delete $ServiceName | Out-Null
        Start-Sleep -Seconds 2
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã
    $binPath = "`"$XrayExe`" run -c `"$configPath`""
    New-Service -Name $ServiceName `
                -BinaryPathName $binPath `
                -DisplayName "Xray Reality Service" `
                -StartupType Automatic `
                -ErrorAction Stop | Out-Null

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–±–æ—è—Ö
    & sc.exe failure $ServiceName reset= 0 actions= restart/5000/restart/5000/restart/5000 | Out-Null

    Start-Service -Name $ServiceName -ErrorAction Stop
    Write-Host "‚úÖ –°–ª—É–∂–±–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª—É–∂–±—ã: $_" -ForegroundColor Red
    exit 1
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
$connectionInfo = @"
=== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
–°–µ—Ä–≤–µ—Ä: $(hostname)
–ü–æ—Ä—Ç: $port
–ü—Ä–æ—Ç–æ–∫–æ–ª: socks
–õ–æ–≥–∏–Ω: $socksUsername
–ü–∞—Ä–æ–ª—å: $socksPassword
ShortID: $shortId
ServerName: $serverName
PublicKey: $($keys.Public)

=== QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ===
socks://$socksUsername`:$socksPassword@$(hostname)`:$port#XrayReality

=== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Linux-–∫–ª–∏–µ–Ω—Ç–∞ ===
xray socks -inbound `"socks://$socksUsername`:$socksPassword@:$port`" -outbound `"outbound= freedom`"
"@

Set-Content -Path $KeysFile -Value $connectionInfo -Encoding UTF8

Write-Host "`n=============================================="
Write-Host "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
Write-Host "üîë –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:"
Write-Host "   $KeysFile"
Write-Host "=============================================="
Write-Host "`n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
Write-Host "–°–µ—Ä–≤–µ—Ä: $(hostname)"
Write-Host "–ü–æ—Ä—Ç: $port"
Write-Host "–õ–æ–≥–∏–Ω: $socksUsername"
Write-Host "–ü–∞—Ä–æ–ª—å: $socksPassword"
Write-Host "`n–ú–æ–∂–µ—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ keys.txt –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
