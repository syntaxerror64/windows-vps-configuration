# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Xray + Reality —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º

$ErrorActionPreference = "Stop"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –æ—Ç–ª–∞–¥–∫–∏
function Save-DebugLog {
    param (
        [string]$ErrorMessage,
        [string]$ConfigPath,
        [string]$XrayLogPath
    )
    $DebugLogPath = Join-Path ([Environment]::GetFolderPath("Desktop")) "debug_log.txt"
    $DebugContent = @"
=== Debug Log ===
Timestamp: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Error Message: $ErrorMessage

=== Contents of config.json ===
$(if (Test-Path $ConfigPath) { Get-Content -Path $ConfigPath -Raw } else { "config.json not found" })

=== Contents of xray.log ===
$(if (Test-Path $XrayLogPath) { Get-Content -Path $XrayLogPath -Raw } else { "xray.log not found" })

=== Windows Event Log for XrayRealityService ===
"@
    try {
        $events = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            ProviderName = 'Service Control Manager'
            Level = 2,3
            StartTime = (Get-Date).AddHours(-1)
        } -ErrorAction SilentlyContinue | Where-Object { $_.Message -like "*XrayRealityService*" } | ForEach-Object {
            "Time: $($_.TimeCreated)`nID: $($_.Id)`nMessage: $($_.Message)`n---"
        }
        if ($events) {
            $DebugContent += $events -join "`n"
        } else {
            $DebugContent += "No relevant events found in System log for XrayRealityService"
        }
    }
    catch {
        $DebugContent += "Failed to retrieve Windows Event Log: $_"
    }
    try {
        [System.IO.File]::WriteAllText($DebugLogPath, $DebugContent, [System.Text.UTF8Encoding]::new($false))
        Write-Host "üìù –õ–æ–≥ –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $DebugLogPath" -ForegroundColor Yellow
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –æ—Ç–ª–∞–¥–∫–∏: $_" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!" -ForegroundColor Red
    Save-DebugLog -ErrorMessage "Script not run as administrator" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
$InstallDir = "C:\Program Files\XrayReality"
$XrayUrl = "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-windows-64.zip"
$ServiceName = "XrayRealityService"
$DesktopPath = [Environment]::GetFolderPath("Desktop")
$KeysFile = Join-Path $DesktopPath "keys.txt"
$ZipPath = "$env:TEMP\Xray.zip"
$LogFile = Join-Path $InstallDir "xray.log"

$popularDomains = @(
    "www.google.com",
    "www.microsoft.com",
    "www.cloudflare.com",
    "www.github.com",
    "www.amazon.com"
)

Write-Host "=============================================="
Write-Host "üöÄ –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray + Reality"
Write-Host "=============================================="

if (-Not (Test-Path $InstallDir)) {
    Write-Host "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $InstallDir"
    try {
        New-Item -ItemType Directory -Path $InstallDir -Force -ErrorAction Stop | Out-Null
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${InstallDir}: $_" -ForegroundColor Red
        Save-DebugLog -ErrorMessage "Failed to create directory: $_" -ConfigPath $configPath -XrayLogPath $LogFile
        exit 1
    }
}

Write-Host "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Xray..."
try {
    Invoke-WebRequest -Uri $XrayUrl -OutFile $ZipPath -ErrorAction Stop
    Write-Host "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
    Expand-Archive -Path $ZipPath -DestinationPath $InstallDir -Force -ErrorAction Stop
    Remove-Item $ZipPath -ErrorAction Stop
    Write-Host "‚úÖ –ê—Ä—Ö–∏–≤ Xray —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ Xray: $_" -ForegroundColor Red
    Save-DebugLog -ErrorMessage "Failed to download or extract Xray: $_" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

Write-Host "üîç –ü–æ–∏—Å–∫ xray.exe –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $InstallDir..."
try {
    $XrayExe = Get-ChildItem -Path $InstallDir -Recurse -Include "xray.exe" -ErrorAction Stop | Select-Object -First 1 -ExpandProperty FullName
    if (-Not $XrayExe) {
        throw "–§–∞–π–ª xray.exe –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
    Write-Host "‚úÖ –ù–∞–π–¥–µ–Ω xray.exe: $XrayExe"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ xray.exe: $_" -ForegroundColor Red
    Save-DebugLog -ErrorMessage "Failed to find xray.exe: $_" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

function Generate-RandomPassword {
    $length = 12
    $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
    $password = -join (1..$length | ForEach-Object { $chars[(Get-Random -Minimum 0 -Maximum $chars.Length)] })
    return $password
}

function Generate-RandomShortId {
    $bytes = New-Object Byte[] 4
    [System.Security.Cryptography.RandomNumberGenerator]::Create().GetBytes($bytes)
    return [System.BitConverter]::ToString($bytes).Replace("-", "").Substring(0, 8).ToLower()
}

function Generate-Keys {
    Write-Host "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π..."
    try {
        $result = & $XrayExe x25519
        $publicKey = ($result | Select-String "Public key" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
        $privateKey = ($result | Select-String "Private key" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
        if (-not $publicKey -or -not $privateKey) {
            throw "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏"
        }
        return @{Public=$publicKey; Private=$privateKey}
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: $_" -ForegroundColor Red
        Save-DebugLog -ErrorMessage "Failed to generate keys: $_" -ConfigPath $configPath -XrayLogPath $LogFile
        exit 1
    }
}

Write-Host "`nüîê –í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SOCKS-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
$socksUsername = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
$socksPassword = Generate-RandomPassword
Write-Host "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: $socksPassword"

$serverName = $popularDomains | Get-Random
$shortId = Generate-RandomShortId
$port = Get-Random -Minimum 20000 -Maximum 60000
$uuid = [guid]::NewGuid().ToString()

Write-Host "`nüõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
Write-Host "  - –ü–æ—Ä—Ç: $port"
Write-Host "  - ServerName: $serverName"
Write-Host "  - ShortID: $shortId"

$keys = Generate-Keys

$escapedLogFile = $LogFile -replace '\\', '\\\\'

$configJson = @"
{
  "log": {
    "loglevel": "warning",
    "access": "$escapedLogFile",
    "error": "$escapedLogFile"
  },
  "inbounds": [
    {
      "port": $port,
      "protocol": "socks",
      "settings": {
        "auth": "password",
        "accounts": [
          {
            "user": "$socksUsername",
            "pass": "$socksPassword"
          }
        ],
        "udp": true
      },
      "sniffing": {
        "enabled": true,
        "destOverride": ["http", "tls"]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "$serverName:443",
          "xver": 0,
          "serverNames": ["$serverName"],
          "privateKey": "$($keys.Private)",
          "publicKey": "$($keys.Public)",
          "shortIds": ["$shortId"],
          "maxTimeDiff": 0,
          "strict": true
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
"@

$configPath = Join-Path $InstallDir "config.json"
try {
    $configJson | ConvertFrom-Json -ErrorAction Stop | Out-Null
    [System.IO.File]::WriteAllText($configPath, $configJson, [System.Text.UTF8Encoding]::new($false))
    Write-Host "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: $configPath"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $_" -ForegroundColor Red
    Save-DebugLog -ErrorMessage "JSON configuration error: $_" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

Write-Host "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ xray.exe..."
try {
    $testOutput = & $XrayExe run -c $configPath 2>&1
    Write-Host "‚ÑπÔ∏è –í—ã–≤–æ–¥ xray.exe: $testOutput"
    if ($testOutput -match "error" -or $testOutput -match "failed") {
        throw "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ xray.exe: $testOutput"
    }
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ xray.exe: $_" -ForegroundColor Red
    Save-DebugLog -ErrorMessage "Xray test run failed: $_" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

Write-Host "üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã Windows..."
try {
    $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
    if ($service) {
        Write-Host "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ª—É–∂–±—ã $ServiceName..."
        if ($service.Status -eq "Running") {
            Stop-Service -Name $ServiceName -Force -ErrorAction Stop
            Start-Sleep -Seconds 2
        }
        & sc.exe delete $ServiceName | Out-Null
        if ($LASTEXITCODE -ne 0) {
            throw "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É $ServiceName"
        }
        Start-Sleep -Seconds 2
    }

    $binPath = "`"$XrayExe`" run -c `"$configPath`""
    New-Service -Name $ServiceName `
                -BinaryPathName $binPath `
                -DisplayName "Xray Reality Service" `
                -StartupType Automatic `
                -ErrorAction Stop | Out-Null

    & sc.exe failure $ServiceName reset= 0 actions= restart/5000/restart/5000/restart/5000 | Out-Null
    if ($LASTEXITCODE -ne 0) {
        throw "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã"
    }

    Write-Host "üöÄ –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã $ServiceName..."
    Start-Service -Name $ServiceName -ErrorAction Stop
    Write-Host "‚úÖ –°–ª—É–∂–±–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ —Å–ª—É–∂–±—ã: $_" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π Windows (eventvwr) –∏ –ª–æ–≥-—Ñ–∞–π–ª $LogFile –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    Save-DebugLog -ErrorMessage "Service creation or start failed: $_" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

$connectionInfo = @"
=== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
–°–µ—Ä–≤–µ—Ä: $(hostname)
–ü–æ—Ä—Ç: $port
–ü—Ä–æ—Ç–æ–∫–æ–ª: socks
–õ–æ–≥–∏–Ω: $socksUsername
–ü–∞—Ä–æ–ª—å: $socksPassword
ShortID: $shortId
ServerName: $serverName
PublicKey: $($keys.Public)

=== QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ===
socks://$socksUsername`:$socksPassword@$(hostname)`:$port#XrayReality

=== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Linux-–∫–ª–∏–µ–Ω—Ç–∞ ===
xray socks -inbound `"socks://$socksUsername`:$socksPassword@:$port`" -outbound `"outbound= freedom`"
"@

try {
    [System.IO.File]::WriteAllText($KeysFile, $connectionInfo, [System.Text.UTF8Encoding]::new($false))
    Write-Host "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $KeysFile"
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $_" -ForegroundColor Red
    Save-DebugLog -ErrorMessage "Failed to save connection info: $_" -ConfigPath $configPath -XrayLogPath $LogFile
    exit 1
}

Write-Host "`n=============================================="
Write-Host "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
Write-Host "üîë –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:"
Write-Host "   $KeysFile"
Write-Host "=============================================="
Write-Host "`n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
Write-Host "–°–µ—Ä–≤–µ—Ä: $(hostname)"
Write-Host "–ü–æ—Ä—Ç: $port"
Write-Host "–õ–æ–≥–∏–Ω: $socksUsername"
Write-Host "–ü–∞—Ä–æ–ª—å: $socksPassword"
Write-Host "`n–ú–æ–∂–µ—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ keys.txt –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
